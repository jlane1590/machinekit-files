# ########################################
#
# HAL file for BeagleBone for Modified Paradex Stewart Platform
#
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w sudo ./setup_arms.sh

# ###################################
# Core EMC/HAL Loads
# ###################################

# Kinematics
loadrt ryanarmskins

# Motion controller, get name and thread periods from ini file
# Trajectory planner
loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[TRAJ]AXES tp=tp kins=ryanarmskins

# GPIO Driver - outputs are pwm direction pins, inputs are homing switches
loadrt hal_bb_gpio output_pins=809,814,817,818,828,837,839,911,912,917,918

# HAL PRU generic driver - 2 quadrature encoder counters
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg

# PID
loadrt pid count=4

# PWMSS driver - 2 eQEP encoder counters, 6 ePWM generators, 2 eCAP PWM generator
loadrt hal_arm335xPWMSS eqeps="eQEP1,eQEP2" epwms="ePWM0,ePWM1,ePWM2" ecaps="eCAP0,eCAP2" frequency=25000 minDC=0 maxDC=100 type=1

# HAL streamer to read stdin for pose commands
#loadrt streamer depth=1000 cfg="f"
#loadusr halstreamer -N hstreamer

loadrt rc_ctrl count=4

# ################################################
# THREADS
# ################################################

# motion controller functions
addf motion-command-handler 				servo-thread
addf motion-controller							servo-thread
# HAL_PRU_GENERIC functions
addf hpg.capture-position						servo-thread
addf hpg.update										servo-thread
# GPIO functions
addf bb_gpio.read									servo-thread
addf bb_gpio.write									servo-thread
# PID functions
addf pid.0.do-pid-calcs							servo-thread
addf pid.1.do-pid-calcs							servo-thread
addf pid.2.do-pid-calcs							servo-thread
addf pid.3.do-pid-calcs							servo-thread
# PWMSS function
addf pwmss.update								servo-thread
# HAL streamer function
#addf streamer.0										servo-thread
# RC Servo functions
addf rc-ctrl.0								servo-thread
addf rc-ctrl.1								servo-thread
addf rc-ctrl.2								servo-thread
addf rc-ctrl.3								servo-thread

# ########################
# RC Servo Setup
# ########################

setp rc-ctrl.0.inDeg	0
setp rc-ctrl.0.scale	1
setp rc-ctrl.0.maxWidth 2460
setp rc-ctrl.0.minWidth 720
setp rc-ctrl.0.baseWidth 1590

setp rc-ctrl.1.inDeg	0
setp rc-ctrl.1.scale	1
setp rc-ctrl.1.maxWidth 2460
setp rc-ctrl.1.minWidth 720
setp rc-ctrl.1.baseWidth 1590

setp rc-ctrl.2.inDeg	0
setp rc-ctrl.2.scale	1
setp rc-ctrl.2.maxWidth 2460
setp rc-ctrl.2.minWidth 720
setp rc-ctrl.2.baseWidth 1590

setp rc-ctrl.3.inDeg	0
setp rc-ctrl.3.scale	1
setp rc-ctrl.3.maxWidth 2460
setp rc-ctrl.3.minWidth 720
setp rc-ctrl.3.baseWidth 1590

# ################
# HPG ENCODER SETUP
# ################

setp hpg.encoder.00.chan.00.A-pin				0
setp hpg.encoder.00.chan.00.B-pin        			6
setp hpg.encoder.00.chan.00.index-pin      	17
setp hpg.encoder.00.chan.00.index-enable 	0
setp hpg.encoder.00.chan.00.counter-mode	0
setp hpg.encoder.00.chan.00.reset				0
setp hpg.encoder.00.chan.00.scale					23.81

setp hpg.encoder.00.chan.01.A-pin        			16
setp hpg.encoder.00.chan.01.B-pin        			7
setp hpg.encoder.00.chan.01.index-pin      	18
setp hpg.encoder.00.chan.01.index-enable 	0
setp hpg.encoder.00.chan.01.counter-mode	0
setp hpg.encoder.00.chan.01.reset				0
setp hpg.encoder.00.chan.01.scale					23.81

# ######################
# PWMSS SETUP
# ######################

# PID outputs required speed in in/sec, assume 5in/sec is the max linear speed the motors can produce under load
# so 5in/sec corresponds to 100% duty cycle
setp ePWM0.dc_scale				5.0
setp ePWM1.dc_scale				5.0
setp ePWM2.dc_scale				5.0

setp eCAP0.dc_scale				5.0
setp eCAP2.dc_scale				5.0

setp eQEP1.index-enable 		0
setp eQEP1.position-scale 		23.81

setp eQEP2.index-enable 		0
setp eQEP2.position-scale 		23.81

# ######################
# PID SETUP
# ######################

setp pid.0.maxoutput				5.0 #assume max desired linear speed is 5in/sec
setp pid.0.deadband 				0.05 #assume 0.05in error is close enough
setp pid.0.Pgain 					20.0
setp pid.0.Igain 						0.35
setp pid.0.Dgain 					4.0
setp pid.0.FF0					0.0
setp pid.0.FF1					0.65
setp pid.0.FF2					0.02

setp pid.1.maxoutput 				5.0
setp pid.1.deadband 				0.05
setp pid.1.Pgain 					20.0
setp pid.1.Igain 						0.35
setp pid.1.Dgain 					4.0
setp pid.1.FF0					0.0
setp pid.1.FF1					0.65
setp pid.1.FF2					0.02

setp pid.2.maxoutput 				5.0
setp pid.2.deadband 				0.05
setp pid.2.Pgain 					20.0
setp pid.2.Igain 						0.35
setp pid.2.Dgain 					4.0
setp pid.2.FF0					0.0
setp pid.2.FF1					0.65
setp pid.2.FF2					0.02

setp pid.3.maxoutput 				5.0
setp pid.3.deadband 				0.05
setp pid.3.Pgain 					20.0
setp pid.3.Igain 						0.35
setp pid.3.Dgain 					4.0
setp pid.3.FF0					0.0
setp pid.3.FF1					0.65
setp pid.3.FF2					0.02

# ################
# [0] Joint
# ################

# axis enable chain
newsig motor.00.enable bit
sets motor.00.enable FALSE

net motor.00.enable <= axis.0.amp-enable-out
net motor.00.enable => ePWM2.en_B
net motor.00.enable => pid.0.enable
#enable motor drivers, set STBY to high
net motor.00.enable => bb_gpio.p8.out-28

# position command, feedback, and velocity output
net motor.00.pos-cmd <= axis.0.motor-pos-cmd
net motor.00.pos-cmd => pid.0.command

net motor.00.pos-fb <= eQEP2.position
net motor.00.pos-fb => axis.0.motor-pos-fb
net motor.00.pos-fb => pid.0.feedback

#loop gui cmd to fb
#net motor.00.pos-cmd => axis.0.motor-pos-fb

net motor.00.vel-out <= pid.0.output
net motor.00.vel-out => ePWM2.dc_B

net motor.00.vel-dir <= ePWM2.dir_B
net motor.00.vel-dir => bb_gpio.p8.out-09
net motor.00.vel-dir-inv <= ePWM2.dir_B_inv
net motor.00.vel-dir-inv => bb_gpio.p8.out-14

# ################
# [1] Joint
# ################

# axis enable chain
newsig motor.01.enable bit
sets motor.01.enable FALSE

net motor.01.enable <= axis.1.amp-enable-out
net motor.01.enable => ePWM2.en_A
net motor.01.enable => pid.1.enable

# position command, feedback, and velocity output
net motor.01.pos-cmd <= axis.1.motor-pos-cmd
net motor.01.pos-cmd => pid.1.command

net motor.01.pos-fb <= eQEP1.position
net motor.01.pos-fb => axis.1.motor-pos-fb
net motor.01.pos-fb => pid.1.feedback

#loop gui cmd to fb
#net motor.01.pos-cmd => axis.1.motor-pos-fb

net motor.01.vel-out <= pid.1.output
net motor.01.vel-out => ePWM2.dc_A

net motor.01.vel-dir <= ePWM2.dir_A
net motor.01.vel-dir => bb_gpio.p8.out-17
net motor.01.vel-dir-inv <= ePWM2.dir_A_inv
net motor.01.vel-dir-inv => bb_gpio.p8.out-18

# ################
# [2] Joint
# ################

# axis enable chain
newsig motor.02.enable bit
sets motor.02.enable FALSE

net motor.02.enable <= axis.2.amp-enable-out
net motor.02.enable => ePWM1.en_B
net motor.02.enable => pid.2.enable

# position command, feedback, and velocity output
net motor.02.pos-cmd <= axis.2.motor-pos-cmd
net motor.02.pos-cmd => pid.2.command

net motor.02.pos-fb <= hpg.encoder.00.chan.00.position
net motor.02.pos-fb => axis.2.motor-pos-fb
net motor.02.pos-fb => pid.2.feedback

#loop gui cmd to fb
#net motor.02.pos-cmd => axis.2.motor-pos-fb

net motor.02.vel-out <= pid.2.output
net motor.02.vel-out => ePWM1.dc_B

net motor.02.vel-dir <= ePWM1.dir_B
net motor.02.vel-dir => bb_gpio.p9.out-18
net motor.02.vel-dir-inv <= ePWM1.dir_B_inv
net motor.02.vel-dir-inv => bb_gpio.p9.out-17

# ################
# [3] Joint
# ################

# axis enable chain
newsig motor.03.enable bit
sets motor.03.enable FALSE

net motor.03.enable <= axis.3.amp-enable-out
net motor.03.enable => ePWM1.en_A
net motor.03.enable => pid.3.enable

# position command, feedback, and velocity output
net motor.03.pos-cmd <= axis.3.motor-pos-cmd
net motor.03.pos-cmd => pid.3.command

net motor.03.pos-fb <= hpg.encoder.00.chan.01.position
net motor.03.pos-fb => axis.3.motor-pos-fb
net motor.03.pos-fb => pid.3.feedback

#loop gui cmd to fb
#net motor.03.pos-cmd => axis.3.motor-pos-fb

net motor.03.vel-out <= pid.3.output
net motor.03.vel-out => ePWM1.dc_A

net motor.03.vel-dir <= ePWM1.dir_A
net motor.03.vel-dir => bb_gpio.p9.out-11
net motor.03.vel-dir-inv <= ePWM1.dir_A_inv
net motor.03.vel-dir-inv => bb_gpio.p9.out-12

# ################
# [4] Joint
# ################

# axis enable chain
newsig motor.04.enable bit
sets motor.04.enable FALSE

net motor.04.enable <= axis.4.amp-enable-out
net motor.04.enable => eCAP2.en

# position command, feedback, and velocity output
net motor.04.pos-cmd <= axis.4.motor-pos-cmd
net motor.04.pos-cmd => rc-ctrl.0.in

#loop gui cmd to fb
net motor.04.pos-cmd => axis.4.motor-pos-fb

net motor.04.vel-out <= rc-ctrl.0.out
net motor.04.vel-out => eCAP2.dc

# ################
# [5] Joint
# ################

# axis enable chain
newsig motor.05.enable bit
sets motor.05.enable FALSE

net motor.05.enable <= axis.5.amp-enable-out
net motor.05.enable => ePWM0.en_A

# position command, feedback, and velocity output
net motor.05.pos-cmd <= axis.5.motor-pos-cmd
net motor.05.pos-cmd => rc-ctrl.1.in

#loop gui cmd to fb
net motor.05.pos-cmd => axis.5.motor-pos-fb

net motor.05.vel-out <= rc-ctrl.1.out
net motor.05.vel-out => ePWM0.dc_A

# ################
# [6] Joint
# ################

# axis enable chain
newsig motor.06.enable bit
sets motor.06.enable FALSE

net motor.06.enable <= axis.6.amp-enable-out
net motor.06.enable => ePWM0.en_B

# position command, feedback, and velocity output
net motor.06.pos-cmd <= axis.6.motor-pos-cmd
net motor.06.pos-cmd => rc-ctrl.2.in

#loop gui cmd to fb
net motor.06.pos-cmd => axis.6.motor-pos-fb

net motor.06.vel-out <= rc-ctrl.2.out
net motor.06.vel-out => ePWM0.dc_B

# ################
# [7] Joint
# ################

# axis enable chain
newsig motor.07.enable bit
sets motor.07.enable FALSE

net motor.07.enable <= axis.7.amp-enable-out
net motor.07.enable => eCAP0.en

# position command, feedback, and velocity output
net motor.07.pos-cmd <= axis.7.motor-pos-cmd
net motor.07.pos-cmd => rc-ctrl.3.in

#loop gui cmd to fb
net motor.07.pos-cmd => axis.7.motor-pos-fb

net motor.07.vel-out <= rc-ctrl.3.out
net motor.07.vel-out => eCAP0.dc

# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed
