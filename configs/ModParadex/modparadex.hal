# ########################################
#
# HAL file for BeagleBone for Modified Paradex Stewart Platform
#
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w ./setup.sh

# ###################################
# Core EMC/HAL Loads
# ###################################

# Kinematics
#loadrt genhexkins
loadrt modparakins

# Motion controller, get name and thread periods from ini file
# Trajectory planner
loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[TRAJ]AXES tp=tp kins=modparakins
#loadrt ddt count=9

# GPIO Driver - outputs are pwm direction pins, inputs are homing switches
loadrt hal_bb_gpio output_pins=809,814,817,818,837,839,911,912,913,915,917,918,923,926 input_pins=834,836,838,840,842,844,846

# HAL PRU generic driver - 4 quadrature encoder counters
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg

# PID
loadrt pid count=7

# PWMSS driver - 3 eQEP encoder counters, 6 ePWM generators, 1 eCAP PWM generator
loadrt hal_arm335xPWMSS eqeps="eQEP0,eQEP1,eQEP2" epwms="ePWM0,ePWM1,ePWM2" ecaps="eCAP2" frequency=25000 minDC=0 maxDC=100 type=1

# HAL streamer to read stdin for pose commands
loadrt streamer depth=1000 cfg="ffffff"
loadusr halstreamer -N hstreamer

# ################################################
# THREADS
# ################################################

# motion controller functions
addf motion-command-handler 				servo-thread
addf motion-controller							servo-thread
# HAL_PRU_GENERIC functions
addf hpg.capture-position						servo-thread
addf hpg.update										servo-thread
# GPIO functions
addf bb_gpio.read									servo-thread
addf bb_gpio.write									servo-thread
# PID functions
addf pid.0.do-pid-calcs							servo-thread
addf pid.1.do-pid-calcs							servo-thread
addf pid.2.do-pid-calcs							servo-thread
addf pid.3.do-pid-calcs							servo-thread
addf pid.4.do-pid-calcs							servo-thread
addf pid.5.do-pid-calcs							servo-thread
addf pid.6.do-pid-calcs							servo-thread
# PWMSS function
addf pwmss.update								servo-thread
# HAL streamer function
addf streamer.0										servo-thread

# ################
# HPG ENCODER SETUP
# ################

setp hpg.encoder.00.chan.00.A-pin					15
setp hpg.encoder.00.chan.00.B-pin        			14
setp hpg.encoder.00.chan.00.index-pin      	17
setp hpg.encoder.00.chan.00.index-enable 	0
setp hpg.encoder.00.chan.00.counter-mode	0
setp hpg.encoder.00.chan.00.reset				0
setp hpg.encoder.00.chan.00.scale					844.8

setp hpg.encoder.00.chan.01.A-pin        			2
setp hpg.encoder.00.chan.01.B-pin        			1
setp hpg.encoder.00.chan.01.index-pin      	18
setp hpg.encoder.00.chan.01.index-enable 	0
setp hpg.encoder.00.chan.01.counter-mode	0
setp hpg.encoder.00.chan.01.reset				0
setp hpg.encoder.00.chan.01.scale					844.8

setp hpg.encoder.00.chan.02.A-pin        			7
setp hpg.encoder.00.chan.02.B-pin        			16
setp hpg.encoder.00.chan.02.index-pin      	19
setp hpg.encoder.00.chan.02.index-enable 	0
setp hpg.encoder.00.chan.02.counter-mode	0
setp hpg.encoder.00.chan.02.reset				0
setp hpg.encoder.00.chan.02.scale					844.8

setp hpg.encoder.00.chan.03.A-pin        			0
setp hpg.encoder.00.chan.03.B-pin        			6
setp hpg.encoder.00.chan.03.index-pin      	20
setp hpg.encoder.00.chan.03.index-enable 	0
setp hpg.encoder.00.chan.03.counter-mode	0
setp hpg.encoder.00.chan.03.reset				0
setp hpg.encoder.00.chan.03.scale					844.8
#change scale for yaw motor

# ######################
# PWMSS SETUP
# ######################

# PID outputs required speed in in/sec, assume 5in/sec is the max linear speed the motors can produce under load
# so 5in/sec corresponds to 100% duty cycle
setp ePWM0.dc_scale				5.0
setp ePWM1.dc_scale				5.0
setp ePWM2.dc_scale				5.0

setp eCAP2.dc_scale				500.0

setp eQEP0.index-enable 		0
setp eQEP0.position-scale 		844.8

setp eQEP1.index-enable 		0
setp eQEP1.position-scale 		844.8

setp eQEP2.index-enable 		0
setp eQEP2.position-scale 		9.98

# ######################
# PID SETUP
# ######################

setp pid.0.maxoutput				5.0 #assume max desired linear speed is 5in/sec
setp pid.0.deadband 				0.05 #assume 0.05in error is close enough
setp pid.0.Pgain 					20.0
setp pid.0.Igain 						0.5
setp pid.0.Dgain 					4.0
setp pid.0.FF0					0.0
setp pid.0.FF1					1.0
setp pid.0.FF2					0.06

setp pid.1.maxoutput 				5.0
setp pid.1.deadband 				0.05
setp pid.1.Pgain 					20.0
setp pid.1.Igain 						0.5
setp pid.1.Dgain 					4.0
setp pid.1.FF0					0.0
setp pid.1.FF1					1.0
setp pid.1.FF2					0.06

setp pid.2.maxoutput 				5.0
setp pid.2.deadband 				0.05
setp pid.2.Pgain 					20.0
setp pid.2.Igain 						0.5
setp pid.2.Dgain 					4.0
setp pid.2.FF0					0.0
setp pid.2.FF1					1.0
setp pid.2.FF2					0.06

setp pid.3.maxoutput 				5.0
setp pid.3.deadband 				0.05
setp pid.3.Pgain 					20.0
setp pid.3.Igain 						0.5
setp pid.3.Dgain 					4.0
setp pid.3.FF0					0.0
setp pid.3.FF1					1.0
setp pid.3.FF2					0.06

setp pid.4.maxoutput 				5.0
setp pid.4.deadband 				0.05
setp pid.4.Pgain 					20.0
setp pid.4.Igain 						0.5
setp pid.4.Dgain 					4.0
setp pid.4.FF0					0.0
setp pid.4.FF1					1.0
setp pid.4.FF2					0.06

setp pid.5.maxoutput 				5.0
setp pid.5.deadband 				0.05
setp pid.5.Pgain 					20.0
setp pid.5.Igain 						0.5
setp pid.5.Dgain 					4.0
setp pid.5.FF0					0.0
setp pid.5.FF1					1.0
setp pid.5.FF2					0.06

setp pid.6.maxoutput 				500.0
setp pid.6.deadband 				1
setp pid.6.Pgain 					35.0
setp pid.6.Igain 						0.5
setp pid.6.Dgain 					40.0
setp pid.6.FF0					0.0
setp pid.6.FF1					1.8
setp pid.6.FF2					0.05

# ################
# X [0] Axis
# ################

# axis enable chain
newsig motor.00.enable bit
sets motor.00.enable FALSE

net motor.00.enable <= axis.0.amp-enable-out
net motor.00.enable => ePWM2.en_B
net motor.00.enable => pid.0.enable

# position command, feedback, and velocity output
net motor.00.pos-cmd <= axis.0.motor-pos-cmd
net motor.00.pos-cmd => pid.0.command

net motor.00.pos-fb <= eQEP1.position
#net motor.00.pos-fb => axis.0.motor-pos-fb
net motor.00.pos-fb => pid.0.feedback

#loop gui cmd to fb
#net gui-pos-loop.0 <= axis.0.motor-pos-cmd
net motor.00.pos-cmd => axis.0.motor-pos-fb

#net streamer0 <= streamer.0.pin.0
#net streamer0 => pid.6.Pgain
#net streamer1 <= streamer.0.pin.1
#net streamer1 => pid.6.Igain
#net streamer2 <= streamer.0.pin.2
#net streamer2 => pid.6.Dgain
#net streamer3 <= streamer.0.pin.3
#net streamer3 => pid.6.FF0
#net streamer4 <= streamer.0.pin.4
#net streamer4 => pid.6.FF1
#net streamer5 <= streamer.0.pin.5
#net streamer5 => pid.6.FF2
#net motor.00.pos-cmd => pid.6.Pgain

net motor.00.vel-out <= pid.0.output
net motor.00.vel-out => ePWM2.dc_B

net motor.00.vel-dir <= ePWM2.dir_B
net motor.00.vel-dir => bb_gpio.p8.out-09
net motor.00.vel-dir-inv <= ePWM2.dir_B_inv
net motor.00.vel-dir-inv => bb_gpio.p8.out-14

# ################
# Y [1] Axis
# ################

# axis enable chain
newsig motor.01.enable bit
sets motor.01.enable FALSE

net motor.01.enable <= axis.1.amp-enable-out
net motor.01.enable => ePWM2.en_A
net motor.01.enable => pid.1.enable

# position command, feedback, and velocity output
net motor.01.pos-cmd <= axis.1.motor-pos-cmd
net motor.01.pos-cmd => pid.1.command

net motor.01.pos-fb <= hpg.encoder.00.chan.00.position
#net motor.01.pos-fb => axis.1.motor-pos-fb
net motor.01.pos-fb => pid.1.feedback

#loop gui cmd to fb
net motor.01.pos-cmd => axis.1.motor-pos-fb

#net motor.01.pos-cmd => pid.6.Igain

net motor.01.vel-out <= pid.1.output
net motor.01.vel-out => ePWM2.dc_A

net motor.01.vel-dir <= ePWM2.dir_A
net motor.01.vel-dir => bb_gpio.p8.out-17
net motor.01.vel-dir-inv <= ePWM2.dir_A_inv
net motor.01.vel-dir-inv => bb_gpio.p8.out-18

# ################
# Z [2] Axis
# ################

# axis enable chain
newsig motor.02.enable bit
sets motor.02.enable FALSE

net motor.02.enable <= axis.2.amp-enable-out
net motor.02.enable => ePWM0.en_A
net motor.02.enable => pid.2.enable

# position command, feedback, and velocity output
net motor.02.pos-cmd <= axis.2.motor-pos-cmd
net motor.02.pos-cmd => pid.2.command

net motor.02.pos-fb <= hpg.encoder.00.chan.03.position
#net motor.02.pos-fb => axis.2.motor-pos-fb
net motor.02.pos-fb => pid.2.feedback

#loop gui cmd to fb
net motor.02.pos-cmd => axis.2.motor-pos-fb

#net motor.02.pos-cmd => pid.6.Dgain

net motor.02.vel-out <= pid.2.output
net motor.02.vel-out => ePWM0.dc_A

net motor.02.vel-dir <= ePWM0.dir_A
net motor.02.vel-dir => bb_gpio.p8.out-37
net motor.02.vel-dir-inv <= ePWM0.dir_A_inv
net motor.02.vel-dir-inv => bb_gpio.p8.out-39

# ################
# A [3] Axis
# ################

# axis enable chain
newsig motor.03.enable bit
sets motor.03.enable FALSE

net motor.03.enable <= axis.3.amp-enable-out
net motor.03.enable => ePWM1.en_B
net motor.03.enable => pid.3.enable

# position command, feedback, and velocity output
net motor.03.pos-cmd <= axis.3.motor-pos-cmd
net motor.03.pos-cmd => pid.3.command

net motor.03.pos-fb <= hpg.encoder.00.chan.01.position
#net motor.03.pos-fb => axis.3.motor-pos-fb
net motor.03.pos-fb => pid.3.feedback

#loop gui cmd to fb
net motor.03.pos-cmd => axis.3.motor-pos-fb

#net motor.03.pos-cmd => pid.6.FF0

net motor.03.vel-out <= pid.3.output
net motor.03.vel-out => ePWM1.dc_B

net motor.03.vel-dir <= ePWM1.dir_B
net motor.03.vel-dir => bb_gpio.p9.out-15
net motor.03.vel-dir-inv <= ePWM1.dir_B_inv
net motor.03.vel-dir-inv => bb_gpio.p9.out-13

# ################
# B [4] Axis
# ################

# axis enable chain
newsig motor.04.enable bit
sets motor.04.enable FALSE

net motor.04.enable <= axis.4.amp-enable-out
net motor.04.enable => ePWM1.en_A
net motor.04.enable => pid.4.enable

# position command, feedback, and velocity output
net motor.04.pos-cmd <= axis.4.motor-pos-cmd
net motor.04.pos-cmd => pid.4.command

net motor.04.pos-fb <= hpg.encoder.00.chan.02.position
#net motor.04.pos-fb => axis.4.motor-pos-fb
net motor.04.pos-fb => pid.4.feedback

#loop gui cmd to fb
net motor.04.pos-cmd => axis.4.motor-pos-fb

#net motor.04.pos-cmd => pid.6.FF1

net motor.04.vel-out <= pid.4.output
net motor.04.vel-out => ePWM1.dc_A

net motor.04.vel-dir <= ePWM1.dir_A
net motor.04.vel-dir => bb_gpio.p9.out-11
net motor.04.vel-dir-inv <= ePWM1.dir_A_inv
net motor.04.vel-dir-inv => bb_gpio.p9.out-12

# ################
# C [5] Axis
# ################

# axis enable chain
newsig motor.05.enable bit
sets motor.05.enable FALSE

net motor.05.enable <= axis.5.amp-enable-out
net motor.05.enable => ePWM0.en_B
net motor.05.enable => pid.5.enable

# position command, feedback, and velocity output
net motor.05.pos-cmd <= axis.5.motor-pos-cmd
net motor.05.pos-cmd => pid.5.command

net motor.05.pos-fb <= eQEP0.position
#net motor.05.pos-fb => axis.5.motor-pos-fb
net motor.05.pos-fb => pid.5.feedback

#loop gui cmd to fb
net motor.05.pos-cmd => axis.5.motor-pos-fb

#net motor.05.pos-cmd => pid.6.FF2

net motor.05.vel-out <= pid.5.output
net motor.05.vel-out => ePWM0.dc_B

net motor.05.vel-dir <= ePWM0.dir_B
net motor.05.vel-dir => bb_gpio.p9.out-17
net motor.05.vel-dir-inv <= ePWM0.dir_B_inv
net motor.05.vel-dir-inv => bb_gpio.p9.out-23

# ################
# Yaw [6] Axis
# ################

# axis enable chain
newsig motor.06.enable bit
sets motor.06.enable FALSE

net motor.06.enable <= axis.6.amp-enable-out
net motor.06.enable => => eCAP2.en
net motor.06.enable => pid.6.enable

# position command, feedback, and velocity output
net motor.06.pos-cmd <= axis.6.motor-pos-cmd
#net motor_pos <= axis.6.motor-pos-cmd
#net motor.06.pos-cmd <= streamer.0.pin.0
net motor.06.pos-cmd => pid.6.command

net motor.06.pos-fb <= eQEP2.position
#net motor.06.pos-fb => axis.6.motor-pos-fb
net motor.06.pos-fb => pid.6.feedback

#loop gui cmd to fb
net motor.06.pos-cmd => axis.6.motor-pos-fb
#net motor_pos => axis.6.motor-pos-fb

#net motor.06.pos-cmd => pid.0.FF2

net motor.06.vel-out <= pid.6.output
net motor.06.vel-out => eCAP2.dc

net motor.06.vel-dir <= eCAP2.dir
net motor.06.vel-dir => bb_gpio.p9.out-18
net motor.06.vel-dir-inv <= eCAP2.dir_inv
net motor.06.vel-dir-inv => bb_gpio.p9.out-26

# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# ################
# Limit Switches (Homing)
# ################

#newsig limit-x bit
#newsig limit-y bit
#newsig limit-z bit
#newsig limit-a bit
#newsig limit-b bit
#newsig limit-c bit

net limit-x <= bb_gpio.p8.in-46
net limit-y <= bb_gpio.p8.in-44
net limit-z <= bb_gpio.p8.in-42
net limit-a <= bb_gpio.p8.in-40
net limit-b <= bb_gpio.p8.in-38
net limit-c <= bb_gpio.p8.in-36
net limit-u <= bb_gpio.p8.in-34

# Adjust as needed for your switch polarity
setp bb_gpio.p8.in-34.invert 0
setp bb_gpio.p8.in-36.invert 0
setp bb_gpio.p8.in-38.invert 0
setp bb_gpio.p8.in-40.invert 0
setp bb_gpio.p8.in-42.invert 0
setp bb_gpio.p8.in-44.invert 0
setp bb_gpio.p8.in-46.invert 0

net limit-x => axis.0.home-sw-in
net limit-y => axis.1.home-sw-in
net limit-z => axis.2.home-sw-in
net limit-a => axis.3.home-sw-in
net limit-b => axis.4.home-sw-in
net limit-c => axis.5.home-sw-in
net limit-u => axis.6.home-sw-in

#net limit-x => eQEP0.reset

#net limit-x-min => axis.0.neg-lim-sw-in
#net limit-x-max => axis.0.pos-lim-sw-in
#net limit-y-min => axis.1.neg-lim-sw-in
#net limit-y-max => axis.1.pos-lim-sw-in
#net limit-z-min => axis.2.neg-lim-sw-in
#net limit-z-max => axis.2.pos-lim-sw-in
